# -*- coding: utf-8 -*-
"""Citizen AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ke8VJ08jtMzWVdkgv8VJq4I8KKlBZg_H
"""

!pip install transformers torch gradio -q

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# ==========================
# Load AI Model
# ==========================
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token


# ==========================
# Helper Functions
# ==========================
def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response


# ==========================
# App Functions
# ==========================
def city_analysis(city_name):
    prompt = f"""Provide a detailed analysis of {city_name} including:
    1. Crime Index and safety statistics
    2. Accident rates and traffic safety information
    3. Overall safety assessment

    City: {city_name}
    Analysis:"""
    return generate_response(prompt, max_length=800)


def citizen_interaction(query):
    prompt = f"""As a government assistant, provide accurate and helpful information
    about the following citizen query related to public services, government policies, or civic issues:

    Query: {query}
    Response:"""
    return generate_response(prompt, max_length=800)


def compare_cities(city1, city2):
    prompt = f"""Compare the following two cities in terms of:
    1. Crime Index and public safety
    2. Accident and traffic safety
    3. Overall quality of civic services

    City A: {city1}
    City B: {city2}
    Comparison:"""
    return generate_response(prompt, max_length=1000)


def faq_response(choice):
    return citizen_interaction(choice)


def export_text(text):
    return text, gr.File.update(value="citizen_ai_output.txt", visible=True)


# ==========================
# Gradio Interface
# ==========================
with gr.Blocks(theme="soft") as app:
    gr.Markdown(
        """
        # üèôÔ∏è Citizen AI ‚Äì Smart Civic Assistant
        Welcome! This app helps you analyze cities, explore public safety, and get answers to government-related queries.
        """
    )

    with gr.Tabs():
        # --- City Analysis ---
        with gr.TabItem("üåÜ City Analysis"):
            city_input = gr.Textbox(label="Enter City Name", placeholder="e.g., Mumbai, New York, London")
            analyze_btn = gr.Button("üîç Analyze City")
            city_output = gr.Textbox(label="City Report", lines=12)
            export_btn = gr.Button("‚¨áÔ∏è Export Report")
            file_output = gr.File(label="Download Report", visible=False)

            analyze_btn.click(city_analysis, inputs=city_input, outputs=city_output)
            export_btn.click(export_text, inputs=city_output, outputs=[city_output, file_output])

        # --- Citizen Services ---
        with gr.TabItem("üìë Citizen Services"):
            citizen_query = gr.Textbox(label="Ask Your Question", placeholder="e.g., How to apply for a voter ID?")
            query_btn = gr.Button("üí¨ Get Answer")
            citizen_output = gr.Textbox(label="Government Response", lines=12)

            query_btn.click(citizen_interaction, inputs=citizen_query, outputs=citizen_output)

            gr.Markdown("### Quick FAQs")
            faq_buttons = [
                "What are the steps to apply for a driving license?",
                "How to pay property tax online?",
                "What documents are needed for passport application?",
                "How to file a police complaint online?"
            ]
            for q in faq_buttons:
                btn = gr.Button(q)
                btn.click(faq_response, inputs=gr.Textbox(value=q, visible=False), outputs=citizen_output)

        # --- City Comparison ---
        with gr.TabItem("‚öñÔ∏è City Comparison"):
            with gr.Row():
                city1 = gr.Textbox(label="First City", placeholder="e.g., Mumbai")
                city2 = gr.Textbox(label="Second City", placeholder="e.g., Delhi")
            compare_btn = gr.Button("üîé Compare Cities")
            compare_output = gr.Textbox(label="Comparison Report", lines=12)

            compare_btn.click(compare_cities, inputs=[city1, city2], outputs=compare_output)

app.launch(share=True)